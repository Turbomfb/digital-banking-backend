name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: The deployment environment
        required: true
      image_tag:
        required: true
        type: string
    secrets:
      build_image_token:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      ecs_cluster:
        required: true
      ecs_service:
        required: true
      aws_region:
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # Use Zulu as recommended by Fineract
          java-version: '17'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.build_image_token }}

      - name: Extract metadata (tags) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            ${{ inputs.image_tag }}
            ${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id  }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ecs_cluster }} \
            --service ${{ secrets.ecs_service }} \
            --force-new-deployment
    
